----
To build the programs,

Ensure that the "siggy" directory has a sibling directory/project "csprng".
And "ch".
And "kyber", cloned from https://github.com/MuKnSys/kyber for bugfixes.

( cd build/keygen && go build )
( cd build/signode && go build )

The main program is called signode.
It can be used to generate a longterm distributed key and also to sign.

Here is how to run all members in a single process:

# this directory is preconfigured for three members in a single process
cd run
# generate a longterm distributed key (needn't repeat this per signing)
# we specify a threshold T of 2 members. T in Kyber library's sense.
./signode config.out test_keys/public/ test_keys/p1_secret/ 2 _
# the program prints the name of a file in /tmp containing the longterm shares
# move the file to test_keys/p1_secret/longterms_t2
# this is how you can then sign the bigint represented by hex AA.
echo 0 _ AA |
./signode config.out test_keys/public/ test_keys/p1_secret/ 2 _ \
test_keys/p1_secret/longterms_t2
# the triple supplied is (run_id_namespace start_time doc)
#   run_id_namespace is a namespace in which you guarantee that the run's time
#     forms a unique run ID.
#   start_time says when to perform the run. format: 2022-09-01T05:50:42+02:00 .
#     a value of _ means to use some default time,
#     and is only for when testing with all members running in a single process.
#   doc is a bigint represented as hex.

----
Hints for if you want to specify your own configuration (config.out),

- generate as many keypairs as you want by doing "cd run && ./keygen"
- specify hosts and the members local to those hosts in run/config.in
  - the h1, h2 labels are meaningless at present
- generate config.out from config.in (see below)
- place all the public key files in a directory D replicated to all hosts
- give each host the secret keys for members it will host
  - let's say each host calls its secret key dir S
- on each host run "./signode config.out $D $S $T $inittime
    to generate the longterm distributed key,
    where T is desired threshold and inittime indicates when
      program initialization is to be regarded as complete.
      inittime is also used to compute a time at which the run should start.
      all time formats are: 2022-09-01T05:50:42+02:00
      time values may be _ when testing with all members in one process.
- the same command but with additional arg <longterm_file_path>
    can run the signing protocol. runs are requested on stdin.

----
Hints for converting config.in to config.out,

Preparation: Install GNU CLISP
Step 1: Read and apply hostcomp/hostcomp.lisp to expand config.in
Step 2: Use s2j to convert the expansion to a valid config.out JSON file

Alternatively, hand-edit config.out directly.
